#!/usr/bin/perl
# WDT enhancements to version 5.2.1 Feb 2011
#   * Added cloud_area_fraction variable to preserve CLR|SKC|VV info.
#   * Fixed problems with temperatures, visibility, etc., by adding space to
#     replacement strings.
#   * Not interpreting MISG in Canadian remarks as weather.
#   * Added debugging option [-l] to not redirect stdout to log file
#   * TODO? Allow unknown stations
#   * TODO? Add vars for TSNO, FZRANO, PWINO (present weather), PNO (rain gauge), etc.
### FIXME? Is there an occasional off-by-one indexing problem for metadata (as seen in point_obs)?
###        Seems to show up for a few recently added stations, including several EH (Holland) stations.
#
#  usage: metar2nc.new1 [-v] [-l] [-c] [-n (old|new)] [-h] cdlfile [datatdir] [yyyymm] < ncfile
#
#
use NetCDF ;
use Time::Local;
#no encoding;

# process command line switches
$metar = "new";
$realTime = 1 ;
while ($_ = $ARGV[0], /^-/) {
	 shift;
       last if /^--$/;
		/^(-v)/ && $verbose++;
		/^(-h)/ && $hourly++; #create hourly files instead of daily
		/^(-n)/ && ( $metar = shift );
		/^(-c)/ && ( $realTime = 0 );
		/^(-l)/ && ( $nolog = 1 ); # WDT added -s option to not redirect stdout
}
if( $metar eq "new" ) {
	if( $hourly ) {
		$metar = "00";
	} else {
		$metar = "_0000";
	}
	$metarPrefix = "Surface_METAR_";
} else {
	$metar = "_metar";
	$metarPrefix = "";
}
# process input parameters
if( $#ARGV == 0 ) {
	$cdlfile = $ARGV[ 0 ] ;
} elsif( $#ARGV == 1 ) {
	$cdlfile = $ARGV[ 0 ] ;
	if( $ARGV[ 1 ] =~ /^\d/ ) {
		$yyyymm = $ARGV[ 1 ] ;
	} else {
		$datadir = $ARGV[ 1 ] ;
	}
} elsif( $#ARGV == 2 ) {
	$cdlfile = $ARGV[ 0 ] ;
	$datadir = $ARGV[ 1 ] ;
	$yyyymm = $ARGV[ 2 ] ;
} else {
	die "usage: metar2nc [-v] [-l] [-n (old|new)] [-h] cdlfile [datatdir] [yyyymm] < ncfile $!\n" ;
}

die "Missing cdlfile parameter: $!\n" unless  -e $cdlfile ;
if( -e "util/ncgen" ) {
	$ncgen = "util/ncgen" ;
} elsif( -e "/usr/local/ldm/util/ncgen" ) {
	$ncgen = "/usr/local/ldm/util/ncgen" ;
} elsif( -e "/upc/netcdf/bin/ncgen" ) {
	$ncgen = "/upc/netcdf/bin/ncgen" ;
} elsif( -e "./ncgen" ) {
	$ncgen = "./ncgen" ;
} else {
	open( NCGEN, "which ncgen |" ) ;
	$ncgen = <NCGEN> ;
	close( NCGEN ) ;

	if( $ncgen =~ /no ncgen/ ) {
		die "Can't find NetCDF utility 'ncgen' in PATH, util/ncgen
/usr/local/ldm/util/ncgen, /upc/netcdf/bin/ncgen, or ./ncgen : $!\n" ;
	} else {
		$ncgen = "ncgen" ;
	}
}
# hard code because it's the same for all the files and would require a 
# netCDF::varid call for each report
$min_ob_id = 0 ;
$max_ob_id = 1 ;
$lastReport = 3 ;
$numReports = 4 ;

# the data directory 
$datadir = "." if( ! $datadir ) ;
system( "mkdir -p $datadir" ) if( ! -e $datadir ) ;
if (!$nolog) {
if( -e "$datadir/metarLog.log.2" ) {
	`rm -f $datadir/metarLog.log.3`;
	`mv $datadir/metarLog.log.2 $datadir/metarLog.log.3`;
}
if( -e "$datadir/metarLog.log.1" ) {
	`mv $datadir/metarLog.log.1 $datadir/metarLog.log.2`;
}
if( -e "$datadir/metarLog.log" ) {
	`mv $datadir/metarLog.log $datadir/metarLog.log.1`;
}
# redirect STDOUT and STDERR
open( STDOUT, ">$datadir/metarLog.log" ) ||
		die "could not open $datadir/metarLog.log: $!\n" ;
open( STDERR, ">&STDOUT" ) ||
		die "could not dup stdout: $!\n" ;
select( STDERR ) ; $| = 1 ;
select( STDOUT ) ; $| = 1 ;
}

# year and month
if( ! $yyyymm ) {
	$theyear = (gmtime())[ 5 ] ;
	$theyear = ( $theyear < 100 ? $theyear : $theyear - 100 ) ;
	$thedecade = sprintf( "%02d", $theyear ) ;
	$theyear = "20" . sprintf( "%02d", $theyear ) ;
	$themonth = (gmtime())[ 4 ] ;
	$themonth++ ;
	$themonth = sprintf( "%02d", $themonth ) ;
	$yyyymm = "$theyear$themonth" ;
} else {
	die "yyyymm must be 6 in length: $!\n" if( length( $yyyymm ) != 6 ) ;
	$theyear = substr( $yyyymm, 0, 4 ) ;
	$themonth = substr( $yyyymm, 4 ) ;
	$thedecade = substr( $yyyymm, 2, 2 ) ;
}

# set error handling to verbose only
$status = NetCDF::opts( VERBOSE ) ;

# set interrupt handler
$SIG{ 'INT' }  = 'atexit' ;
$SIG{ 'KILL' }  = 'atexit' ;
$SIG{ 'TERM' }  = 'atexit' ;
$SIG{ 'QUIT' }  = 'atexit' ;

# Create place holder for netCDF

$F = -99999 ;
$A = \$F ;
$S1 = "\0" ;
$AS1 = \$S1 ;
$S2 = "\0\0" ;
$AS2 = \$S2 ;
$S3 = "\0\0\0" ;
$AS3 = \$S3 ;
$S4 = "\0\0\0\0" ;
$AS4 = \$S4 ;
$S5 = "\0\0\0\0\0" ;
$AS5 = \$S5 ;
$S8 = "\0" x 8 ;
$AS8 = \$S8 ;
$S10 = "\0" x 10 ;
$AS10 = \$S10 ;
$S15 = "\0" x 15 ;
$AS15 = \$S15 ;
$S16 = "\0" x 16 ;
$AS16 = \$S16 ;
$S20 = "\0" x 20 ;
$AS20 = \$S20 ;
$S32 = "\0" x 32 ;
$AS32 = \$S32 ;
$S128 = "\0" x 128 ;
$AS128 = \$S128 ;
$S192 = "\0" x 192 ;
$AS192 = \$S192 ;

# create station index number from cdl
print "Reading CDL $cdlfile\n";
open( STATION, "$cdlfile" ) || die "could not open $cdlfile: $!\n" ;
$count = 0 ;
while( <STATION> ) {
	next unless( /^\s+station_id =/ );
	while( <STATION> ) {
		last if( /^\n|station_description/ );
		s#,|;|"##g;
		s#^\s*##;
		( @STN ) = split( /\s+/, $_ );
		for( $i = 0; $i <= $#STN; $i++ ) {
			#print "$STN[ $i ] = $count\n" ;
			$STATION{ "$STN[ $i ]" } = $count++ ;
		}
	}
	last;
}
close STATION ;

# open metar.lst, hash of reports processed in the last 24 hours.
if( -e "$datadir/metar.lst" ) {
	print "Reading $datadir/metar.lst\n";
	open( LST, "$datadir/metar.lst" ) || 
		die "could not open $datadir/metar.lst: $!\n" ;
	while( <LST> ) {
		( $stn, $time_obs, $rptlen ) = split ;
		$rpt_hash{ "$stn $time_obs" }  = $rptlen ;
	}
	close LST ;
	#unlink( "$datadir/metar.lst" ) ;
}
# Now begin parsing file and decoding observations breaking on cntrl C
$/ = "\cC" ;

# set select processing here from STDIN
START:
while( 1 ) {
	open( STDIN, '-' ) ;
	vec($rin,fileno(STDIN),1) = 1;
	$timeout = 1200 ; # 20 minutes
	$nfound = select( $rout = $rin, undef, undef, $timeout );
	# timed out
	if( ! $nfound ) {
		print "Shut down, time out 20 minutes\n" ;
		atexit() ;
	}
	atexit( "eof" ) if( eof( STDIN ) ) ;

	# Process each line of metar bulletins, header first
	$_ = <STDIN> ;
	s#\cC## ;
	s#\cM##g ;
	s#\cA\n## ;
	s#\c^##g ;
 
	s#\d\d\d \n## ;
	s#\w{4}\d{1,2} \w{4} (\d{2})(\d{2})(\d{2}).*\n## ;
	$bday = $1 ;
	$bhour = $2 ;
	$bhour = "23" if( $bhour eq "24" ) ;
	$bmin = $3 ;
	next unless ( $bday && defined( $bhour ) && defined( $bmin ) ) ;
	next if( $bmin > 59 || $bhour > 23 || $bday > 31 ) ;
	# check for valid transmission times against current time
        if( $realTime ) {
		$cday = (gmtime())[ 3 ] ;
		$chour = (gmtime())[ 2 ] ;
        } else {
		$cday = $bday ;
		$chour = $bhour ;
	}
	# skip bulletins over 24 hours old or in the future
	if( $bday == $cday ) {
		next if( $bhour > $chour ) ;
	} else { #  $bday != $cday, skip over day old reports
 		next if( $bday < $cday -1 ) ;
 		if( $bday > $cday ) {
			next if( $cday != 1 || $bday < 28) ;
		}
		next if( $bhour < $chour ) ;
	}
	# reset year and month
	$theyear = (gmtime())[ 5 ] ;
	$theyear = ( $theyear < 100 ? $theyear : $theyear - 100 ) ;
	$thedecade = sprintf( "%02d", $theyear ) ;
	$theyear = "20" . sprintf( "%02d", $theyear ) ;
	$themonth = (gmtime())[ 4 ] ;
	$themonth++ ;
	$themonth = sprintf( "%02d", $themonth ) ;
	$yyyymm = "$theyear$themonth" ;
	if( s#^(METAR|SPECI) \d{4,6}Z?\n## ) {
		$bulletin_type = $1 ;
	} elsif( s#^(METAR|SPECI)\s*\n## ) {
		$bulletin_type = $1 ;
	} elsif( s#^MTR\w{3}\s*\n## ) {
		$bulletin_type = "METAR" ;
	} else {
		$bulletin_type = "METAR" ;
	}
	# Separate bulletins into reports 
	s#RTX=## ;
	if( /=\n/ ) {
		s#=\s+\n#=\n#g ;
	} else {
		s#\n# #g ;
		s# RTX FIBI\s+#=\n#g ;
	}
	@reports = split( /=\n/ ) ;
	for ( @reports ) { # Process each report in the bulletin
		next if( /\d{4,6}Z.*\d{4,6}Z/ ) ;
		$tmpmonth = $themonth ;
		$tmpyear = $theyear ;
		$tmpdecade = $thedecade ;
		undef( $report ) ;
		undef( $supplementary ) ;
		undef( $remarks ) ;
		undef( $extra ) ;
		undef( $stn_name ) ;
		next if( /^\n|\cX|\cZ/ ) ;
		s#\n|\s+# #g ;
		s#\s+# #g;  # WDT remove duplicate blanks RLC 2011-02-23
		$report = $_ ;
		$rpt_length = length( $report );
		# separate report from supplementary information and remarks
		# by pressure field
		if( s#^(.*) (A2|A3|Q0|Q1)(\d{3})(.*)#$1 $2$3# ) {
			$extra = $4;
		} elsif( /NIL| SA / ) {
			next;
		} elsif( s# RMK(.*)?## ) {
			$remarks =  "$1 " ;
			next if( ! $1 || $1 =~ /NIL/ ) ;
		} else {
			#print "no pressure info $_\n";
			#next;
		}
		if( $extra =~ s# RE(.*) RMK(.*)?## ) {
			$supplementary = "$1 ";
			$remarks =  "$2 " unless( ! $2 || $2 =~ /NIL/ ) ;
		} elsif( $extra =~ s# RMK(.*)?## ) {
			$remarks =  "$1 " unless( ! $1 || $1 =~ /NIL/ ) ;
		} elsif( $extra =~ s#RE(.*)?## ) {
			$supplementary = "$1 ";
		}
		$_ = "$_ " ;
		$rep_type = $bulletin_type ;
		$rep_type = $1 if( s#^(METAR|SPECI|TESTM|TESTS) ## ) ;
		$stn_name = $1 if( s#^(\w{4}) ## ) ;
		next unless( $stn_name ) ;
		# get/check day hour minute
		if( s#^(\d{2})(\d{2})(\d{2})Z## ) {
			$rday = $1 ;
			$rhour = $2 ;
			$rmin = $3 ;
			next unless
				(defined( $rday ) && defined( $rhour ) && defined( $rmin ));
			next if( $rmin > 59 || $rhour > 23 || $rday > 31 ) ;
			# skip reports over 24 hours old
			if( $rday == $cday ) {
				next if( $rhour > $chour ) ;
			} else { #  $rday != $cday, skip over day old reports
		 		next if( $rday < ( $cday -1 ) ) ;
		 		if( $rday > $cday ) {
					next if( $cday != 1 || $rday < 28) ;
					# cday = 1, reset month and year
					$tmpmonth = 
						sprintf( "%02d", $themonth -1 );
					if( $tmpmonth == 0 ) {
						$tmpmonth = "12" ;
						$tmpyear = 
						sprintf( "%04d", $theyear -1 );
						$tmpdecade = 
						sprintf( "%02d", $thedecade -1 );
					} else {
						$tmpyear = $theyear ;
					}
				}
		 		next if( $rhour < $chour ) ;
			}
		} else {
			next ;
		}
		$time_obs = theTime( "obs" ) ;
		# calculate nominal time
		# rmin > 44 then next hour  minute 0
		if( $rmin > 44 ) {
			$time_nominal = (( 60 - $rmin ) *60 ) + $time_obs ;
		} else {
			$time_nominal = $time_obs ;
		}
		# Skip duplicate reports based on stn, time and length
		if( $rpt_hash{ "$stn_name $time_obs" } >= $rpt_length ) { 
			next ;
		}
		$rpt_hash{ "$stn_name $time_obs" } = $rpt_length;

		# skip NIL reports
		next if( s#NIL## ) ;

		# extract stn_number
		if( defined( $STATION{ "$stn_name" } ) ) {
			$stn_number = $STATION{ "$stn_name" } ;
		} elsif( $stn_name =~ /^K|^C/ ) { # US & Canadian stations 
			$tmp = substr( $stn_name, 1 ) ;
			if( defined( $STATION{ "$tmp" } ) ) {
				$stn_number = $STATION{ "$tmp" } ;
			} else {
				#print "Missing station from cdl, $stn_name\n";
				next ;
			}
		} else {
			next ;
		}
		$AUTO = 1 if( s#AUTO\s+# # ) ;
		# get wind direction and speed
		$DIR = $SPD = $GUST = $F ; 
		if( s# (E|W|N|S)?(\d{3}|VRB)(\d{2,3})(G)?(\d{2,3})?(KMH|KT|MPS|MPH) # # ) {
			if( $2 eq "VRB" ) {
				$VRB = 1 ;
			} else {
				$DIR = $2 ;
			}
			$UNITS = $6 ;
			if( $UNITS eq "KT" ) {
				$UNITS = "m/s" ;
				$convert = 0.514444 ;
			} else {
				$convert = 1 ;
			}
			$SPD =  $3 * $convert ;
			$GUST = $5 * $convert if( $4 eq "G" ) ;
		}
		# get min|max wind direction
		$DIRmin = $DIRmax = $F ;
		if( s#^\s*(\d{3})V(\d{3})\s+# # ) {
			$DIRmin = $1 ;
			$DIRmax = $2 ;
		}
		# get visibility
		# some reports use a place holder for visibility
		s#9999\s+## ;
		# clear
		$CAVOK = 1 if( s#CAVOK\s+# # ) ;
		# min/max visibility
		if( s#\b(\d{4})([NSEW]+) (\d{4})([NSEW]+)\s+# # ){
			$minHorizontalVIS = "$1$2";
			#print "minHorizontalVIS =$horizontalVIS\n";
			$maxHorizontalVIS = "$1$2";
			#print "maxHorizontalVIS =$horizontalVIS\n";
                } elsif( s#\b(\d{3})\s+# # ){
			$horizontalVIS = "$1$2";
			#print "horizontalVIS =$horizontalVIS\n";
                }
		# this is the old format for visibility
		$VIS = $F ;
		$VIS_dir = $S2 ;
		$VIS = 0.0 if( s# M1/4SM | <1/4SM # # ) ;
		$VIS = 0.0 if( s# M1/4KM | <1/4KM # # ) ;
		s# P(\d{1,3})(SM|KM) # $1$2 # ;

		if( s# (\d{1,4}) (\d{1,3})/(\d{1,3})(SM|KM) # # ) {
			$VIS = $1 + ( $2 / $3 ) if( $4 eq "SM" ) ;
			$VIS = ( $1 + ( $2 / $3 )) / 1.61 if( $4 eq "KM" ) ;

		} elsif( s# (\d{1,3})/(\d{1,3})(KM|SM) # # ) {
			$VIS = $1 / $2  if( $3 eq "SM" ) ;
			$VIS = ( $1 / $2 ) / 1.61  if( $3 eq "KM" ) ;

		} elsif( s# (\d{1,4})(KM|SM) # # ) {
			$VIS = $1 if( $2 eq "SM" ) ;
			$VIS = ( $1 ) / 1.61 if( $2 eq "KM" ) ;

		} elsif( s# (\d{4})((NE)|(NW)|(SE)|(SW)|(N)|(S)|(E)|(W)) # # ){
			$VIS = $1 ;
			$VIS_dir = $2 ;
			$VIS_dir = padstr( $VIS_dir, 2 ) ;
		}
		# WDT Strip Canadian missing remarks (avoid MISG weather) RLC 2011-02-23
		s# (ALTM|CLD|CLDN|RVR|VIS|WX) MISG\b# #g;
		s#\s+# #g;  # WDT remove duplicate blanks, otherwise WX parse may fail
		# Get weather conditions
		for( $i = 0; $i < 3; $i++ ) {
			# code table 4678
                        ### FIXME Misses SNPL, +DZRA, -RASN - assumes different phenom separated by space
			if( s# (\+|-|VC)?(MI|PR|BC|DR|BL|SH|TS|FZ)?(DZ|RA|SN|SG|IC|PL|GR|GS|UP)?(BR|FG|FU|VA|DU|SA|HZ|PY)?(PO|SQ|FC|SS|DS)? # # ) {
				last unless "$3$4$5" ;
				$WX .= "$1$2$3$4$5 " ;
			} else {
				last ;
			}
		}
		$WX = padstr( $WX, 16 ) ;

		# Vertical visibility
		$vert_VIS = $F ;
		$vert_VIS = cloud_hgt2_meters( $1 ) if( s# VV(\d{3}) # # ) ;

		# cloud layers up to 3
		# WDT Added cloud_area_fraction variable to preserve CLR|SKC|VV info.
		# RLC 2011-02-23
		$cloud_area_fraction = $F;
		if (s# (CLR|SKC)\s+# #) {
			$cloud_area_fraction = 0;
		}
		elsif ($vert_VIS != $F) {
			$cloud_area_fraction = 1;
		}
		$low_cloud_oktas = $low_cloud_height  = $F ;
		$middle_cloud_oktas = $middle_cloud_height  = $F ;
		$high_cloud_oktas = $high_cloud_height  = $F ;
		$layer = "low" ;
		# FEW = 1, SCT = 3, BKN = 6, OVC = 8
		while( s# (\+|-)?(OVC|SCT|FEW|BKN)(\d{3})(\w{1,3})? # # ){
			$cloud_type = "$1$2" ;
			$cloud_hgt = $3 * 100 ;
			$cloud_meters = cloud_hgt2_meters( $3 ) ;
			$cloud_phenom = $4 if( $4 ) ;
			if( $2 eq "FEW" ) {
				$oktas = 1 ;
			} elsif( $2 eq "SCT" ) {
				$oktas = 3 ;
			} elsif( $2 eq "BKN" ) {
				$oktas = 6 ;
			} elsif( $2 eq "OVC" ) {
				$oktas = 8 ;
			}
			if( $1 eq "-" ) {
				$oktas -= 1 ;
			} elsif( $1 eq "+" ) {
				$oktas += 1 ;
			}
			if( $layer eq "low" ) {
				$low_cloud_oktas = $oktas/8. ;
				$low_cloud_height  = $cloud_meters ;
				$layer = "middle" ;
			} elsif( $layer eq "middle" ) {
				$middle_cloud_oktas = $oktas/8. ;
				$middle_cloud_height  = $cloud_meters ;
				$layer = "high" ;
			} else {
				$high_cloud_oktas = $oktas/8. ;
				$high_cloud_height  = $cloud_meters ;
			}
			$cloud_area_fraction = $oktas/8.;
		}
		# get temperature and dew point
		$T_tenths = $TD_tenths = $F ;
		#if( s#\s*(M)?(\d{2})/(M)?(\d{2})?( |RMK)# # ) {
		if( s#\s*(M)?(\d{2})/(M)?(\d{2})?# # ) {
			$T_tenths = $2 ;
			$T_tenths *= -1 if( $1 ) ;
			$TD_tenths = $4 if( defined( $4 ) ) ;
			$TD_tenths *= -1 if( $3 ) ;
		}
		# get Altimeter settings
		$inches_ALTIM = $hectoPasc_ALTIM = $F ;
		if( s# (A|Q)(\d{4}\.?\d?)\s+# # ) {
			if( $1 eq "A" ) {
				$inches_ALTIM = $2 * 0.01 ;
			} else {
				$hectoPasc_ALTIM = $2 ;
			}
		}
		s#\s*##;
		$extra = $_;
		# process remarks
		$_ = $remarks;
		# get Peak winds
		$PKWND_dir = $PKWND_spd = $F ;
		$PKWND_time = $S20 ;
		if( s# PK WND (\d{3})(\d{1,3})/(\d\d)?(\d\d) # # ) {
			$PKWND_dir = $1 ;
			$PKWND_spd = $2 ;
			#$PKWND_hh = $3 if( defined( $3 ) ) ;
			#$PKWND_mm = $4 ;
			$PKWND_time = "$tmpyear-$tmpmonth-$rday" . "T" .
				"$3:$4:00Z" ;
			if( length( $PKWND_time ) < 20 ) { # add hour
				$PKWND_time = "$tmpyear-$tmpmonth-$rday " .
					sprintf( "%02d", $rhour ) . ":$4:00Z";
			}
		}
		# Surface visibility
		$VIS_SFC = $F ;
		if( s# SFC (VIS|VSBY) (\d{1,3}) (\d{1,2})/(\d{1,2}) # # ) {
			$VIS_SFC = $2 + ( $3 / $4 ) ;
		} elsif( s# SFC (VIS|VSBY) (\d{1,2})/(\d{1,2}) # # ) {
			$VIS_SFC = ( $2 / $3 ) ;
		} elsif( s# SFC (VIS|VSBY) (\d{1,3}) # # ) {
			$VIS_SFC = $2 ;
		}
		# Sea-Level presure
		$SLP = $F ;
		if( s# SLP(\d{3}) # # ) {
			if( $1 >= 550 ) {
				$SLP = $1 / 10. + 900. ;
			} else {
				$SLP =  $1 / 10. + 1000. ;
			}
		}
		# Snow Increasing Rapidly   SNINCR
		$SNINCR = $SNINCR_TotalDepth = $F ;
		if( s#SNINCR (\d{1,3})/(\d{1,3})\s+# # ) {
			$SNINCR = $1 ;
			$SNINCR_TotalDepth = $2 ;
		}
		# Snow depth on ground
		if( s# 4/(\d{1,3}) # # ) {
			$SNINCR_TotalDepth = $1 ;
		}
		# Hourly precipitation amount
		$PRECIP_hourly = $F ;
		$PRECIP_hourly = $1 / 100 if( s# P(\d{1,5}) # # ) ;

		# 24 Hour Precipitation amount
		$PRECIP_24_amt = $F ;
		if( s# 7(\d{4}|////) # # ) {
			$PRECIP_24_amt = $1 / 100 if( $1 ne "////" ) ;
		}
		# Temperature and Dew Point
		if( s# T(0|1)(\d{3})(0|1)?(\d{3})? # # ) {
			if( $1 == 0 ) {
				$T_tenths = 0.1 * $2 ;
			} else {
				$T_tenths = -0.1 * $2 ;
			}
			if( defined( $3 ) && $3 == 0 ) {
				$TD_tenths = 0.1 * $4 ;
			} elsif( defined( $3 ) && $3 == 1 ) {
				$TD_tenths = -0.1 * $4 ;
			} else {
				$TD_tenths = $TD if( defined( $TD ) ) ;
			}
		}
		# capture undecoded fields and supplementary fields addition
		$_ = $supplementary . $_ ;
		$remarks = padstr( $_, 50 ) ;

		# debug output
		printvars() if( $verbose ) ;

		# we have a legal report, open a Netcdf file
		$yyyymmdd = theTime( "yyyymmdd" ) ;
		$status = doNet() ;

		# Get lastReport record number so it can be set as the
		# previous report number in the current record. 
		$prevReport = $F ;
		NetCDF::varget1
			( $ncid, $lastReport, [ $stn_number ], $prevReport ) ;

		# set variables into dataref
		setvars() ;
		# enter record 
		$status = NetCDF::recput( $ncid, $recnum, \@dataref ) ;
		if( $status ) { # failure
			print "NetCDF::recput status = $status\n" ;
			$report = substr( $report, 0, $rpt_length );
			print "$ncfile\n$report\n" ;
			# recput failed, so reset lastReport
			NetCDF::varput1
			( $ncid, $lastReport, [ $stn_number ], $prevReport ) ;
		} else { # success
			# set lastReport record number to the current record number
			NetCDF::varput1
				( $ncid, $lastReport, [ $stn_number ], $recnum ) ;
			# set the number of reports for the station
			$rpts = $F ;
			NetCDF::varget1
				( $ncid, $numReports, [ $stn_number ], $rpts ) ;
			$rpts++ ;
			NetCDF::varput1
				( $ncid, $numReports, [ $stn_number ], $rpts ) ;

			# check/set min_ob and max_ob in file
			if( $max_ob == 0 ) { #check file
				NetCDF::varget1
					( $ncid, $min_ob_id, [ 1 ], $min_ob ) ;
				NetCDF::varget1
					( $ncid, $max_ob_id, [ 1 ], $max_ob ) ;
				#print "get min_ob=$min_ob, max_ob=$max_ob\n" ;
			}
			if( $min_ob == 0 || $time_obs < $min_ob ) {
				NetCDF::varput1
					( $ncid, $min_ob_id, [ 1 ], $time_obs );
				#print "put min_ob=$time_obs\n" ;
				$status =  NetCDF::redef( $ncid ) ;
				NetCDF::attput(
	$ncid, NetCDF::GLOBAL, "time_coverage_start", NetCDF::CHAR, "$time_obs seconds since 1970-01-01 00 UTC" );
				$status =  NetCDF::endef( $ncid ) ;
                                $min_ob = $time_obs;
			} elsif( $max_ob < $time_obs ) {
				NetCDF::varput1
					( $ncid, $max_ob_id, [ 1 ], $time_obs );
				#print "put max_ob=$time_obs\n" ;
				$status =  NetCDF::redef( $ncid ) ;
				NetCDF::attput(
	$ncid, NetCDF::GLOBAL, "time_coverage_end", NetCDF::CHAR, "$time_obs seconds since 1970-01-01 00 UTC" );
				$status =  NetCDF::endef( $ncid ) ;
                                $max_ob = $time_obs;
			}

			$status = NetCDF::sync( $ncid ) ;
			#print "Syncing $ncfile with ncid $ncid\n" ;
			$recnum++ ;
		}
		# undefine vars
		undefinevars() ;
	} # end foreach report
} # end while( 1 )
atexit( "eof" );
exit( 0 ) ; #should never get here

# convert cloud height to  meters
sub cloud_hgt2_meters {

my( $value, $meters ) ;
( $value ) = @_ ;

if( $value == 999 ) {
	$meters = 30000 ;
} else {
	$meters = 30 * $value ;
}
} # end cloud_hgt2_meters

# undefine all report vars
sub undefinevars
{
# report vars
undef( $time_obs ) ;
undef( $time_nominal ) ;
undef( $GUST ) ;
undef( $VRB ) ;
undef( $DIR ) ;
undef( $SPD ) ;
undef( $DIRmin ) ;
undef( $DIRmax ) ;
undef( $VIS ) ;
undef( $VIS_dir ) ;
undef( $WX ) ;
undef( $vert_VIS ) ;
undef( $low_cloud_oktas ) ;
undef( $low_cloud_height ) ;
undef( $middle_cloud_oktas ) ;
undef( $middle_cloud_height ) ;
undef( $high_cloud_oktas ) ;
undef( $high_cloud_height ) ;
undef( $inches_ALTIM ) ;
undef( $hectoPasc_ALTIM ) ;

# remarks vars

undef( $PKWND_dir ) ;
undef( $PKWND_spd ) ;
undef( $PKWND_time ) ;
undef( $VIS_SFC ) ;
undef( $SLP ) ;
undef( $SNINCR ) ;
undef( $SNINCR_TotalDepth ) ;
undef( $PRECIP_hourly ) ;
undef( $PRECIP_24_amt ) ;
undef( $T_tenths ) ;
undef( $TD_tenths ) ;

# WDT vars
undef( $cloud_area_fraction ) ;

} # end of undefinevars

# setvars into record
sub setvars {

$report = padstr( $report, 192 ) ;

undef( @dataref ) ;

# create new dataref with vars
$dataref[ 0 ] = \$stn_number ;
$dataref[ 1 ] = \$prevReport ;
$dataref[ 2 ] = \$stn_name ;
$dataref[ 3 ] = \$time_obs ;
$dataref[ 4 ] = \$time_nominal ;
$dataref[ 5 ] = \$DIR ;
$dataref[ 6 ] = \$SPD ;
$dataref[ 7 ] = \$GUST ;
$dataref[ 8 ] = \$DIRmin ;
$dataref[ 9 ] = \$DIRmax ;
$dataref[ 10 ] = \$PKWND_dir ;
$dataref[ 11 ] = \$PKWND_spd ;
$dataref[ 12 ] = \$PKWND_time ;
$dataref[ 13 ] = \$VIS ;
$dataref[ 14 ] = \$VIS_dir ;
$dataref[ 15 ] = \$vert_VIS ;
$dataref[ 16 ] = \$VIS_SFC ;
$dataref[ 17 ] = \$low_cloud_oktas ;
$dataref[ 18 ] = \$low_cloud_height ;
$dataref[ 19 ] = \$middle_cloud_oktas ;
$dataref[ 20 ] = \$middle_cloud_height ;
$dataref[ 21 ] = \$high_cloud_oktas ;
$dataref[ 22 ] = \$high_cloud_height ;
$dataref[ 23 ] = \$cloud_area_fraction ;
$dataref[ 24 ] = \$T_tenths ;
$dataref[ 25 ] = \$TD_tenths ;
$dataref[ 26 ] = \$inches_ALTIM ;
$dataref[ 27 ] = \$hectoPasc_ALTIM ;
$dataref[ 28 ] = \$SLP ;
$dataref[ 29 ] = \$WX ;
$dataref[ 30 ] = \$SNINCR ;
$dataref[ 31 ] = \$SNINCR_TotalDepth ;
$dataref[ 32 ] = \$PRECIP_hourly ;
$dataref[ 33 ] = \$PRECIP_24_amt ;
$dataref[ 34 ] = \$remarks ;
$dataref[ 35 ] = \$rpt_length;
$dataref[ 36 ] = \$report ;

} # end setvars

# create a netcdf file or reopen a existing one
sub doNet {

my( $Ncfile, $Id, $Num, $Time, $baseTime, $offset, $rpt, $stn ) ;

$ncfile = $datadir . "/" . $metarPrefix . $yyyymmdd . $metar . ".nc" ;
if( $hourly ) {
	$ncfile = $datadir . "/" . $metarPrefix . substr( $yyyymmdd, 0, 8 ) . 
		"_" . substr( $yyyymmdd, 8 ) . $metar . ".nc" ;
}
# writing to same file
return 1 if( $ncfile eq $lastNc ) ;

# reset (min|max)_ob value so check occurs
$min_ob = 0 ;
$max_ob = 0 ;

# current time
$thetime = time() ;
# save current Ncfile info and close
if( $lastNc ) {
	# close Ncfile, do not cross month boundry
	if( $cday == 1 && $themonth ne (gmtime())[ 4 ] ) { 
		$status = NetCDF::close( $ncid ) ;
		delete( $Nets{ $lastNc } ) ;
		print "Closing $lastNc with ncid $ncid, day = 1\n" ;
	} else {
		$Nets{ $lastNc } = "$ncid $recnum $thetime" ;
#		$status = NetCDF::sync( $ncid ) ;
#		print "Syncing $lastNc with ncid $ncid\n" ;
	}
}

# File is open, get ncfile id, recnum, and reset the lastNc 
if( defined( $Nets{ $ncfile } ) ) { # already open for writes
	( $ncid, $recnum, $Time ) = split( / /, $Nets{ $ncfile } ) ;
	$lastNc =  $ncfile ;
	return 1 ;
}
# close Ncfiles with no activity for 2 hours
foreach $Ncfile ( keys %Nets ) {
	( $Id, $Num, $Time ) = split( / /, $Nets{ $Ncfile } ) ;
	if( $thetime - $Time > 720 ) {
		print "Closing $Ncfile with ncid $Id, No write for > 2 hours\n" ;
		$status = NetCDF::close( $Id ) ;
		delete( $Nets{ $Ncfile } ) ;
	}
}
# remove rpt entries older than 24 hours
$time_obs = theTime( "obs" ) ;
foreach $rpt ( keys %rpt_hash ) {
	( $stn, $Time ) = split( " ", $rpt ) ;
	$offset = $time_obs - $Time ;
	next if( $offset < 86400 ) ;  
	delete( $rpt_hash{ $rpt } ) ;
}
# open or create ncfiles
if( -e $ncfile ) {
	$ncid = NetCDF::open( "$ncfile", NetCDF::WRITE ) ;
	return 0 if( $ncid == -1 ) ;
	$recNum_id = NetCDF::dimid( $ncid, "recNum" ) ;
	$name_id =  "xxxxxxxx"  ;
	$recnum =  -1  ;
	# get current value of recnum
	NetCDF::diminq( $ncid, $recNum_id, $name_id, $recnum ) ;
} else {
	system( "$ncgen -o $ncfile $cdlfile" ) ;
	$ncid = NetCDF::open( "$ncfile", NetCDF::WRITE ) ;
	#$ncid = NetCDF::create( "$ncfile", NetCDF::CLOBBER ) ;
	return 0 if( $ncid == -1 ) ;
	# NetCDF record counter
	$recnum = 0 ;
}

$Nets{ $ncfile } = "$ncid $recnum $thetime" ;
$lastNc = $ncfile ;
print "Opening $ncfile with ncid $ncid\n" ;

# check for to many Ncfiles open
if( $ncid > 25 ) {
	foreach $Ncfile ( keys %Nets ) {
		( $Id, $Num, $Time ) = split(  / /, $Nets{ $Ncfile } ) ;
		if( $ncid != $Id ) {
			print "Closing $Ncfile with ncid $Id, To many open Ncfiles\n";
			$status = NetCDF::close( $Id ) ;
			delete( $Nets{ $Ncfile } ) ;
		}
	}
}
return 1 ;
} # end doNet

# print vars
sub printvars
{

# original report and remarks

print "report = $report \n" if( defined( $report ) ) ;
print "\n" ;

# report vars
print "station = $stn_name \n" if( defined( $stn_name ) ) ;
print "time_obs = $time_obs \n" if( defined( $time_obs ) ) ;
print "time_nominal = $time_nominal \n" if( defined( $time_nominal ) ) ;
print "GUST = $GUST \n" if( defined( $GUST ) ) ;
print "DIR = $DIR \n" if( defined( $DIR ) ) ;
print "SPD = $SPD \n" if( defined( $SPD ) ) ;
print "DIRmin = $DIRmin \n" if( defined( $DIRmin ) ) ;
print "DIRmax = $DIRmax \n" if( defined( $DIRmax ) ) ;
print "VIS = $VIS \n" if( defined( $VIS ) ) ;
print "VIS_dir = $VIS_dir \n" if( defined( $VIS_dir ) ) ;
print "WX = $WX \n" if( defined( $WX ) ) ;
print "vert_VIS = $vert_VIS \n" if( defined( $vert_VIS ) ) ;
print "cloud_area_fraction = $cloud_area_fraction\n" if defined $cloud_area_fraction;
print "low_cloud_oktas = $low_cloud_oktas\n" 
	if( defined( $low_cloud_oktas ));
print "low_cloud_height = $low_cloud_height\n" 
	if( defined( $low_cloud_height ) );
print "middle_cloud_oktas = $middle_cloud_oktas\n" 
	if( defined( $middle_cloud_oktas ));
print "middle_cloud_height = $middle_cloud_height\n" 
	if( defined( $middle_cloud_height ) );
print "high_cloud_oktas = $high_cloud_oktas\n" 
	if( defined( $high_cloud_oktas ));
print "high_cloud_height = $high_cloud_height\n" 
	if( defined( $high_cloud_height ) );
print "inches_ALTIM = $inches_ALTIM \n" if( defined( $inches_ALTIM )) ;
print "hectoPasc_ALTIM = $hectoPasc_ALTIM \n" if( defined( $hectoPasc_ALTIM )) ;

# remarks vars

#print "\n" ;
print "PKWND_dir = $PKWND_dir \n" if( defined( $PKWND_dir ) ) ;
print "PKWND_spd = $PKWND_spd \n" if( defined( $PKWND_spd ) ) ;
print "PKWND_time = $PKWND_time \n" if( defined( $PKWND_time ) ) ;
print "VIS_SFC = $VIS_SFC \n" if( defined( $VIS_SFC ) ) ;
print "SLP = $SLP \n" if( defined( $SLP ) ) ;
print "SNINCR = $SNINCR \n" if( defined( $SNINCR ) ) ;
print "SNINCR_TotalDepth = $SNINCR_TotalDepth \n" 
	if( defined( $SNINCR_TotalDepth ) ) ;
print "PRECIP_hourly = $PRECIP_hourly \n" if( defined( $PRECIP_hourly ) ) ;
print "PRECIP_24_amt = $PRECIP_24_amt \n" if( defined( $PRECIP_24_amt ) ) ;
print "T_tenths = $T_tenths \n" if( defined( $T_tenths ) ) ;
print "TD_tenths = $TD_tenths \n" if( defined( $TD_tenths ) ) ;
print "\n" ;
} # end printvars

# execute at exit
sub atexit
{
local( $sig ) = @_ ;

if( $sig eq "eof" ) {
	print "eof on STDIN --shutting down\n" ;
} elsif( defined( $sig )) {
	print "Caught SIG$sig --shutting down\n" ;
}
$tmpmonth = $themonth;
# open metar.lst, hash of reports processed in the last 24 hours.
open( LST, ">$datadir/metar.lst" ) || 
	die "could not open $datadir/metar.lst: $!\n" ;
select( LST ) ;
# remove rpt entries older than 24 hours
$time_obs = theTime( "obs" ) ;
foreach $rpt ( keys %rpt_hash ) {
	( $stn, $Time ) = split( " ", $rpt ) ;
	$offset = $time_obs - $Time ;
	next unless( $offset < 86400 ) ;  
	print "$rpt $rpt_hash{ $rpt }\n" ;
}
close LST ;
foreach $file ( keys %Nets ) {
	( $ncid, $recnum, $nctime ) = split( " ", $Nets{ $file } ) ;
	print STDOUT "Closing $file with ncid $ncid\n" ;
	$status = NetCDF::close( $ncid ) ;
}
close( STDOUT ) ;
close( STDERR ) ;
exit( 0 ) ;
} # end atexit

# pad str to correct length with nulls
sub padstr
{
( $str, $len ) = @_ ;

my( $size, $i ) ;

$size = length( $str ) ;

for( $i = $size; $i < $len; $i++ ) {
        $str .= "\0" ;
}
if( $size > $len ) {
	print STDOUT "String length is over $len chars long:\n $str\n" 
		if( $verbose ) ;
	$str = substr( $str, 0, $len ) ;
}
return $str ;
} # end padstr

sub theTime
{
my( $when, $ss, $mm, $hh, $mday, $mon, $year, $wday, $yday, $isdst ) ;

( $when ) = @_ ;

if( $when eq "obs" ) {
	return timegm(0, $rmin, $rhour, $rday, $tmpmonth -1, $tmpdecade, 0,0,0);

} else { # get yyyymmdd from time_nominal
	( $ss, $mm, $hh, $mday, $mon, $year, $wday, $yday, $isdst ) =
		gmtime( $time_nominal ) ;

	$year = ( $year < 100 ? $year : $year - 100 ) ;
	$year = "20" . sprintf( "%02d", $year ) ;
	$mon++ ;
	$mon = sprintf( "%02d", $mon ) ;
	$mday = sprintf( "%02d", $mday ) ;
	$hh = sprintf( "%02d", $hh ) ;
        if( $hourly ) {
		return "$year$mon$mday$hh" ;
	} else {
		return "$year$mon$mday" ;
	}
}
} # end theTime
